palActuator
{
    Apply()
}
     palAngularMotor
     {
        virtual void    Init (palRevoluteLink *pLink, Float Max)

        virtual void    Update (Float targetVelocity)=0
         
        palRevoluteLink *   GetLink ()
         
        virtual std::string     toString () const 
     }
     palDMDCMotor
     {
        void    Init (palRevoluteLink *prl, Float torque_constant, Float back_EMF_constant, Float armature_resistance, Float rotor_inertia, Float coulomb_friction_constant, Float viscous_friction_constant, Float max_brush_drop, Float half_drop_value)

        void    SetVoltage (Float voltage)
         
        void    Apply ()
         
        Float   computeTau (Float source_voltage, Float external_torque, Float joint_vel)
     }
     palGenericLinkSpring
     {
        virtual void    Init (palGenericLink *link)

        virtual void    SetLinearSpring (palAxis axis, const palSpringDesc &spring)
         
        virtual void    GetLinearSpring (palAxis axis, palSpringDesc &out) const
         
        virtual void    SetAngularSpring (palAxis axis, const palSpringDesc &spring)
         
        virtual void    GetAngularSpring (palAxis axis, palSpringDesc &out) const
         
        virtual void    Apply ()
            applies the spring. This may do nothing for some implementations as the physics engine may do the work internally.
         
        palGenericLink *    GetLink ()
     }
palGridFluid
{
    virtual void    Update ()=0
}
     palDampendShallowFluid
     {
        void    Init (int dimX=128, int dimY=128, Float cellSize=0.08, Float density=1000, Float dampingFluid=0.01, Float dampingBody_linear=0.02, Float dampingBody_angular=0.04)

        void    Update ()
         
        int     Get_DimensionsX ()
         
        int     Get_DimensionsY ()
         
        Float   GetCellSize ()
         
        Float *     GetFluidHeights ()
         
        palVector3 *    GetFluidVertices ()
         
        int     GetNumVertices ()
     }
palLink
{
    virtual void    Init (palBodyBase *parent, palBodyBase *child, bool disableCollisionsBetweenLinkedBodies)

    virtual void    Init (palBodyBase *parent, palBodyBase *child, Float x, Float y, Float z, bool disableCollisionsBetweenLinkedBodies)
     
    virtual std::string     toString () const
     
    virtual palLinkFeedback *   GetFeedback () const throw (palIllegalStateException)
     
    virtual     ~palLink ()
        It has a virtual destructor, so there is no reason not be able to delete one. 
}
     palGenericLink
     {
        void    Init (palBodyBase *parent, palBodyBase *child, const palVector3 &pivotLocation, const palVector3 &linearLowerLimits, const palVector3 &linearUpperLimits, const palVector3 &angularLowerLimits, const palVector3 &angularUpperLimits, bool disableCollisionsBetweenLinkedBodies)

        virtual void    Init (palBodyBase *parent, palBodyBase *child, const palMatrix4x4 &parentFrame, const palMatrix4x4 &childFrame, const palVector3 &linearLowerLimits, const palVector3 &linearUpperLimits, const palVector3 &angularLowerLimits, const palVector3 &angularUpperLimits, bool disableCollisionsBetweenLinkedBodies)
     }
     palPrismaticLink
     {
        virtual void    Init (palBodyBase *parent, palBodyBase *child, Float x, Float y, Float z, Float axis_x, Float axis_y, Float axis_z, bool disableCollisionsBetweenLinkedBodies)

        virtual void    SetLimits (Float lower_limit, Float upper_limit)
     }
    palRevoluteLink
    {
        virtual void    Init (palBodyBase *parent, palBodyBase *child, Float x, Float y, Float z, Float axis_x, Float axis_y, Float axis_z, bool disableCollisionsBetweenLinkedBodies)

        virtual void    SetLimits (Float lower_limit_rad, Float upper_limit_rad)
         
        virtual void    GetPosition (palVector3 &pos) const
         
        virtual Float   GetAngle () const
         
        virtual Float   GetAngularVelocity () const
         
        virtual void    ApplyTorque (Float torque)
         
        virtual void    ApplyAngularImpulse (Float torque)
         
        virtual palVector3  GetAxis () const
         
        virtual std::string     toString () const 
    }
         palRevoluteSpringLink
         {
            virtual void    SetSpring (const palSpringDesc &springDesc)=0

            virtual void    GetSpring (palSpringDesc &springDescOut) const =0
         }
     palRigidLink
     {
        virtual void    Init (palBodyBase *parent, palBodyBase *child, bool disableCollisionsBetweenLinkedBodies)
     }
     palSphericalLink
     {
        virtual void    SetLimits (Float cone_limit_rad, Float twist_limit_rad)
     }
palMaterial
{
        palMaterial (const palMaterial &m)

        virtual void    SetParameters (const palMaterialDesc &matDesc)
}
     palMaterialInteraction
     {
            palMaterialInteraction (const palMaterialInteraction &pmi)

            virtual void    Init (palMaterialUnique *pM1, palMaterialUnique *pM2, const palMaterialDesc &matDesc)
             
            virtual palMaterialInteraction &    operator= (const palMaterialInteraction &pmi)
     }
     palMaterialUnique
     {
        virtual void    Init (PAL_STRING name, const palMaterialDesc &desc)
     }
 palMaterials
 {
    virtual palMaterialUnique *     NewMaterial (PAL_STRING name, const palMaterialDesc &matDesc)

    virtual void    SetMaterialInteraction (PAL_STRING name1, PAL_STRING name2, const palMaterialDesc &matDesc)
     
    virtual palMaterialUnique *     GetMaterial (PAL_STRING name)
     
    virtual palMaterialInteraction *    GetMaterialInteraction (PAL_STRING name1, PAL_STRING name2)
 }
palParticleFluid
{
    virtual void    AddParticle (Float x, Float y, Float z, Float vx, Float vy, Float vz)=0

    virtual int     GetNumParticles () const =0
     
    virtual palVector3 *    GetParticlePositions () const =0
     
    virtual void    Finalize ()=0
}
     palSPHFluid
     {
        virtual void    Init ()=0
     }
palSensor
     palCompassSensor
     {
        virtual void    Init (palBody *body, Float north_x, Float north_y, Float north_z)

        virtual Float   GetAngle () const
     }
     palContactSensor
     {
        virtual void    Init (palBody *body)

        virtual void    GetContactPosition (palVector3 &contact) const =0
     }
     palGPSSensor
     {
        virtual void    Init (palBody *body, int UTCseconds, float latitude, float longitude)

        virtual void    GetGPSString (char *string)
     }
     palGyroscopeSensor
     {
        virtual void    Init (palBody *body, Float axis_x, Float axis_y, Float axis_z)

        virtual Float   GetAngle () const
         
            FACTORY_CLASS (palGyroscopeSensor, palGyroscopeSensor,*, 1)
     }
     palInclinometerSensor
     {
        virtual void    Init (palBody *body, Float axis_x, Float axis_y, Float axis_z, Float up_x, Float up_y, Float up_z, Float g_x, Float g_y, Float g_z)

        virtual Float   GetAngle () const
         
            FACTORY_CLASS (palInclinometerSensor, palInclinometerSensor,*, 1)
     }
     palPSDSensor
     {
        virtual void    Init (palBody *body, Float x, Float y, Float z, Float axis_x, Float axis_y, Float axis_z, Float range)

        virtual Float   GetDistance () const =0
     }
     palTransponderReciever
     {
        virtual void    Init (palBody *body)

        virtual Float   GetDistance (int transponder) const
         
        virtual int     GetNumTransponders (void) const 
     }
     palTransponderSender
     {
        virtual void    Init (palBody *body, Float range)
     }
     palVelocimeterSensor
     {
        virtual void    Init (palBody *body, Float axis_x, Float axis_y, Float axis_z)

        virtual Float   GetVelocity () const
     }
 palSettings
 palVehicle